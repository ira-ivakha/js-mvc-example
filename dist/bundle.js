!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){n(2),e.exports=n(1)},function(e,t,n){},function(e,t,n){"use strict";function o(e){this.listeners=[],(e=e||[]).forEach(e=>{this.push(e)})}n.r(t),o.prototype=Object.create(Array.prototype),o.prototype.done=function(e,t){e.done=t,this.trigger("done",[e])},o.prototype.add=function(e){let t={text:e,done:!1};this.push(t),this.trigger("add",[t])},o.prototype.delete=function(e){let t=this.indexOf(e);t>=0&&this.splice(t,1),this.trigger("delete",[e])},o.prototype.on=function(e,t){this.listeners.push({event:e,callback:t})},o.prototype.trigger=function(e,t){let n=this;this.listeners.forEach(o=>{o.event===e&&o.callback.apply(n,t)})};var r=new o([{text:"Brew coffee",done:!0},{text:"Write some code",done:!1},{text:"Sleep",done:!1}]);function i(e){!function(e,t,n){let o=document.createElement("ul"),r=document.createElement("li");function i(e){let t=r.cloneNode(!0);t.task=e;let i=t.querySelector(".text");i.innerHTML=e.text,i.style.textDecoration=e.done?"line-through":"";let c=t.querySelector(".done");c.checked=e.done?"checked":"",c.addEventListener("change",function(t){n.onDone(e,t.target.checked)}),t.querySelector(".delete").addEventListener("click",function(t){n.onDelete(e)}),o.appendChild(t)}r.innerHTML='\n        <input type="checkbox" class="done">\n        <span class="text"></span>\n        <button class="delete">Delete</button>\n        <button class="move-up">Up</button>\n        <button class="move-down">Down</button>\n    ',t.forEach(function(e){i(e)}),t.on("done",function(e){[].forEach.call(o.childNodes,function(t){t.task===e&&(t.querySelector(".text").style.textDecoration=e.done?"line-through":"")})}),t.on("add",function(e){i(e)}),t.on("delete",function(e){[].forEach.call(o.childNodes,function(t){t.task===e&&t.remove()})}),e.appendChild(o)}(e,r,{onDone:function(e,t){r.done(e,t),console.log("tasks",r)},onDelete:function(e){r.delete(e)}}),function(e,t){let n=document.createElement("form");n.innerHTML='\n        <input type="text" name="text">\n        <input type="submit" value="Add">\n    ',n.addEventListener("submit",function(e){let o=n.querySelector("[name=text]"),r=o.value.trim();r&&(t.onSubmit(r),o.value=""),e.preventDefault()}),e.appendChild(n)}(e,{onSubmit:function(e){r.add(e)}})}window.addEventListener("load",function(){i(document.getElementById("todo-list"))})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL3NyYy9qcy90b2RvL21vZGVsL3Rhc2tNb2RlbC5qcyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvc3JjL2pzL3RvZG8vbW9kZWwvdGFzay5qcyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvc3JjL2pzL3RvZG8vY29udHJvbGxlci90YXNrLmpzIiwid2VicGFjazovLy8uL3B1YmxpYy9zcmMvanMvdG9kby92aWV3L3Rhc2suanMiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL3NyYy9qcy90b2RvL3ZpZXcvdGFza0FkZEZvcm0uanMiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL3NyYy9qcy90b2RvL2luZGV4LmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiVGFza01vZGVsIiwidGFza3MiLCJ0aGlzIiwibGlzdGVuZXJzIiwiZm9yRWFjaCIsInRhc2siLCJwdXNoIiwiQXJyYXkiLCJkb25lIiwic3RhdHVzIiwidHJpZ2dlciIsImFkZCIsInRleHQiLCJkZWxldGUiLCJpbmRleCIsImluZGV4T2YiLCJzcGxpY2UiLCJvbiIsImV2ZW50IiwiY2FsbGJhY2siLCJhcmdzIiwibGlzdGVuZXIiLCJhcHBseSIsInRhc2tDb250cm9sbGVyIiwicm9vdEVsZW1lbnQiLCJhY3Rpb25zIiwidWwiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJ0ZW1wbGF0ZSIsImxpIiwiY2xvbmVOb2RlIiwicXVlcnlTZWxlY3RvciIsImlubmVySFRNTCIsInN0eWxlIiwidGV4dERlY29yYXRpb24iLCJjaGVja2JveCIsImNoZWNrZWQiLCJhZGRFdmVudExpc3RlbmVyIiwib25Eb25lIiwidGFyZ2V0Iiwib25EZWxldGUiLCJhcHBlbmRDaGlsZCIsImNoaWxkTm9kZXMiLCJyZW1vdmUiLCJ0YXNrVmlldyIsImNvbnNvbGUiLCJsb2ciLCJmb3JtIiwiaW5wdXQiLCJ0cmltIiwib25TdWJtaXQiLCJwcmV2ZW50RGVmYXVsdCIsInRhc2tBZGRGcm9tVmlldyIsIndpbmRvdyIsImdldEVsZW1lbnRCeUlkIl0sIm1hcHBpbmdzIjoiYUFDQSxJQUFBQSxFQUFBLEdBR0EsU0FBQUMsRUFBQUMsR0FHQSxHQUFBRixFQUFBRSxHQUNBLE9BQUFGLEVBQUFFLEdBQUFDLFFBR0EsSUFBQUMsRUFBQUosRUFBQUUsR0FBQSxDQUNBRyxFQUFBSCxFQUNBSSxHQUFBLEVBQ0FILFFBQUEsSUFVQSxPQU5BSSxFQUFBTCxHQUFBTSxLQUFBSixFQUFBRCxRQUFBQyxJQUFBRCxRQUFBRixHQUdBRyxFQUFBRSxHQUFBLEVBR0FGLEVBQUFELFFBS0FGLEVBQUFRLEVBQUFGLEVBR0FOLEVBQUFTLEVBQUFWLEVBR0FDLEVBQUFVLEVBQUEsU0FBQVIsRUFBQVMsRUFBQUMsR0FDQVosRUFBQWEsRUFBQVgsRUFBQVMsSUFDQUcsT0FBQUMsZUFBQWIsRUFBQVMsRUFBQSxDQUEwQ0ssWUFBQSxFQUFBQyxJQUFBTCxLQUsxQ1osRUFBQWtCLEVBQUEsU0FBQWhCLEdBQ0Esb0JBQUFpQixlQUFBQyxhQUNBTixPQUFBQyxlQUFBYixFQUFBaUIsT0FBQUMsWUFBQSxDQUF3REMsTUFBQSxXQUV4RFAsT0FBQUMsZUFBQWIsRUFBQSxjQUFpRG1CLE9BQUEsS0FRakRyQixFQUFBc0IsRUFBQSxTQUFBRCxFQUFBRSxH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ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFRhc2tNb2RlbCh0YXNrcykge1xuICAgIHRoaXMubGlzdGVuZXJzID0gW107XG5cbiAgICB0YXNrcyA9IHRhc2tzIHx8IFtdO1xuXG4gICAgdGFza3MuZm9yRWFjaCh0YXNrID0+IHtcbiAgICAgICAgdGhpcy5wdXNoKHRhc2spO1xuICAgIH0pO1xufVxuXG5UYXNrTW9kZWwucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShBcnJheS5wcm90b3R5cGUpO1xuXG5UYXNrTW9kZWwucHJvdG90eXBlLmRvbmUgPSBmdW5jdGlvbiAodGFzaywgc3RhdHVzKSB7XG4gICAgdGFzay5kb25lID0gc3RhdHVzO1xuICAgIHRoaXMudHJpZ2dlcignZG9uZScsIFt0YXNrXSk7XG59O1xuXG5UYXNrTW9kZWwucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uICh0ZXh0KSB7XG4gICAgbGV0IHRhc2sgPSB7XG4gICAgICAgIHRleHQsXG4gICAgICAgIGRvbmU6IGZhbHNlXG4gICAgfTtcblxuICAgIHRoaXMucHVzaCh0YXNrKTtcbiAgICB0aGlzLnRyaWdnZXIoJ2FkZCcsIFt0YXNrXSk7XG59O1xuXG5cblRhc2tNb2RlbC5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKHRhc2spIHtcbiAgICBsZXQgaW5kZXggPSB0aGlzLmluZGV4T2YodGFzayk7XG4gICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgICAgdGhpcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cblxuICAgIHRoaXMudHJpZ2dlcignZGVsZXRlJywgW3Rhc2tdKTtcbn07XG5cblxuXG5cblxuVGFza01vZGVsLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uIChldmVudCwgY2FsbGJhY2spIHtcbiAgICB0aGlzLmxpc3RlbmVycy5wdXNoKHtcbiAgICAgICAgZXZlbnQsXG4gICAgICAgIGNhbGxiYWNrXG4gICAgfSk7XG59O1xuXG5UYXNrTW9kZWwucHJvdG90eXBlLnRyaWdnZXIgPSBmdW5jdGlvbiAoZXZlbnQsIGFyZ3MpIHtcbiAgICBsZXQgdGFza3MgPSB0aGlzO1xuXG4gICAgdGhpcy5saXN0ZW5lcnMuZm9yRWFjaChsaXN0ZW5lciA9PiB7XG4gICAgICAgIGlmIChsaXN0ZW5lci5ldmVudCA9PT0gZXZlbnQpIHtcbiAgICAgICAgICAgIGxpc3RlbmVyLmNhbGxiYWNrLmFwcGx5KHRhc2tzLCBhcmdzKTtcbiAgICAgICAgfVxuICAgIH0pO1xufTtcblxuXG4iLCJpbXBvcnQgVGFza01vZGVsIGZyb20gJy4vdGFza01vZGVsJztcbmxldCB0YXNrcyA9IG5ldyBUYXNrTW9kZWwoW1xuICAgICAgICB7XG4gICAgICAgICAgICB0ZXh0OiAnQnJldyBjb2ZmZWUnLFxuICAgICAgICAgICAgZG9uZTogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICB0ZXh0OiAnV3JpdGUgc29tZSBjb2RlJyxcbiAgICAgICAgICAgIGRvbmU6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRleHQ6ICdTbGVlcCcsXG4gICAgICAgICAgICBkb25lOiBmYWxzZVxuICAgICAgICB9XG4gICAgXSk7XG5cbmV4cG9ydCBkZWZhdWx0IHRhc2tzOyIsImltcG9ydCB0YXNrVmlldyBmcm9tICcuLi92aWV3L3Rhc2snXG5pbXBvcnQgdGFza3MgZnJvbSAnLi4vbW9kZWwvdGFzaydcbmltcG9ydCB0YXNrQWRkRnJvbVZpZXcgZnJvbSAnLi4vdmlldy90YXNrQWRkRm9ybSdcblxuZXhwb3J0IGRlZmF1bHQgIGZ1bmN0aW9uIHRhc2tDb250cm9sbGVyKHJvb3RFbGVtZW50KSB7XG5cbiAgICB0YXNrVmlldyhyb290RWxlbWVudCwgdGFza3MsIHtcbiAgICAgICAgb25Eb25lLFxuICAgICAgICBvbkRlbGV0ZVxuICAgIH0pO1xuXG4gICAgdGFza0FkZEZyb21WaWV3KHJvb3RFbGVtZW50LCB7XG4gICAgICAgIG9uU3VibWl0XG4gICAgfSk7XG5cblxuXG5cblxuICAgIGZ1bmN0aW9uIG9uRG9uZSh0YXNrLCBzdGF0dXMpIHtcbiAgICAgICAgdGFza3MuZG9uZSh0YXNrLCBzdGF0dXMpO1xuXG4gICAgICAgIGNvbnNvbGUubG9nKCd0YXNrcycsIHRhc2tzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbkRlbGV0ZSh0YXNrKSB7XG4gICAgICAgIHRhc2tzLmRlbGV0ZSh0YXNrKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvblN1Ym1pdCh0ZXh0KSB7XG4gICAgICAgIHRhc2tzLmFkZCh0ZXh0KTtcbiAgICB9XG5cblxufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRhc2tWaWV3KHJvb3RFbGVtZW50LCB0YXNrcywgYWN0aW9ucykge1xuICAgIGxldCB1bCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3VsJyk7XG5cbiAgICBsZXQgdGVtcGxhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpO1xuICAgIHRlbXBsYXRlLmlubmVySFRNTCA9IGBcbiAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGNsYXNzPVwiZG9uZVwiPlxuICAgICAgICA8c3BhbiBjbGFzcz1cInRleHRcIj48L3NwYW4+XG4gICAgICAgIDxidXR0b24gY2xhc3M9XCJkZWxldGVcIj5EZWxldGU8L2J1dHRvbj5cbiAgICAgICAgPGJ1dHRvbiBjbGFzcz1cIm1vdmUtdXBcIj5VcDwvYnV0dG9uPlxuICAgICAgICA8YnV0dG9uIGNsYXNzPVwibW92ZS1kb3duXCI+RG93bjwvYnV0dG9uPlxuICAgIGA7XG5cbiAgICB0YXNrcy5mb3JFYWNoKGZ1bmN0aW9uKHRhc2spIHtcbiAgICAgICAgYWRkKHRhc2spO1xuICAgIH0pO1xuXG4gICAgdGFza3Mub24oJ2RvbmUnLCBmdW5jdGlvbiAodGFzaykge1xuICAgICAgICBbXS5mb3JFYWNoLmNhbGwodWwuY2hpbGROb2RlcywgZnVuY3Rpb24gKGxpKSB7XG4gICAgICAgICAgICBpZiAobGkudGFzayA9PT0gdGFzaykge1xuICAgICAgICAgICAgICAgIGxpLnF1ZXJ5U2VsZWN0b3IoJy50ZXh0Jykuc3R5bGUudGV4dERlY29yYXRpb24gPSB0YXNrLmRvbmUgPyAnbGluZS10aHJvdWdoJyA6ICcnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIHRhc2tzLm9uKCdhZGQnLCBmdW5jdGlvbiAodGFzaykge1xuICAgICAgICBhZGQodGFzayk7XG4gICAgfSk7XG5cbiAgICB0YXNrcy5vbignZGVsZXRlJywgZnVuY3Rpb24gKHRhc2spIHtcbiAgICAgICAgW10uZm9yRWFjaC5jYWxsKHVsLmNoaWxkTm9kZXMsIGZ1bmN0aW9uIChsaSkge1xuICAgICAgICAgICAgaWYgKGxpLnRhc2sgPT09IHRhc2spIHtcbiAgICAgICAgICAgICAgICBsaS5yZW1vdmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICByb290RWxlbWVudC5hcHBlbmRDaGlsZCh1bCk7XG5cbiAgICBmdW5jdGlvbiBhZGQodGFzaykge1xuICAgICAgICBsZXQgbGkgPSB0ZW1wbGF0ZS5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgICAgIGxpLnRhc2sgPSB0YXNrO1xuXG5cbiAgICAgICAgbGV0IHRleHQgPSBsaS5xdWVyeVNlbGVjdG9yKCcudGV4dCcpO1xuICAgICAgICB0ZXh0LmlubmVySFRNTCA9IHRhc2sudGV4dDtcbiAgICAgICAgdGV4dC5zdHlsZS50ZXh0RGVjb3JhdGlvbiA9IHRhc2suZG9uZSA/ICdsaW5lLXRocm91Z2gnIDogJyc7XG5cbiAgICAgICAgbGV0IGNoZWNrYm94ID0gbGkucXVlcnlTZWxlY3RvcignLmRvbmUnKTtcbiAgICAgICAgY2hlY2tib3guY2hlY2tlZCA9IHRhc2suZG9uZSA/ICdjaGVja2VkJyA6ICcnO1xuICAgICAgICBjaGVja2JveC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIGFjdGlvbnMub25Eb25lKHRhc2ssIGV2ZW50LnRhcmdldC5jaGVja2VkKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbGkucXVlcnlTZWxlY3RvcignLmRlbGV0ZScpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICBhY3Rpb25zLm9uRGVsZXRlKHRhc2spO1xuICAgICAgICB9KTtcblxuICAgICAgICB1bC5hcHBlbmRDaGlsZChsaSk7XG4gICAgfVxufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRhc2tBZGRGcm9tVmlldyhyb290RWxlbWVudCwgYWN0aW9ucykge1xuICAgIGxldCBmb3JtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZm9ybScpO1xuICAgIGZvcm0uaW5uZXJIVE1MID0gYFxuICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuYW1lPVwidGV4dFwiPlxuICAgICAgICA8aW5wdXQgdHlwZT1cInN1Ym1pdFwiIHZhbHVlPVwiQWRkXCI+XG4gICAgYDtcblxuXG4gICAgZm9ybS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgbGV0IGlucHV0ID0gZm9ybS5xdWVyeVNlbGVjdG9yKCdbbmFtZT10ZXh0XScpO1xuICAgICAgICBsZXQgdGV4dCA9IGlucHV0LnZhbHVlLnRyaW0oKTtcblxuICAgICAgICBpZiAodGV4dCkge1xuICAgICAgICAgICAgYWN0aW9ucy5vblN1Ym1pdCh0ZXh0KTtcbiAgICAgICAgICAgIGlucHV0LnZhbHVlID0gJyc7XG4gICAgICAgIH1cbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9KTtcblxuXG4gICAgcm9vdEVsZW1lbnQuYXBwZW5kQ2hpbGQoZm9ybSk7XG59IiwiaW1wb3J0IHRhc2tDb250cm9sbGVyIGZyb20gJy4vY29udHJvbGxlci90YXNrJztcblxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgdGFza0NvbnRyb2xsZXIoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RvZG8tbGlzdCcpKTtcbn0pO1xuXG5cbiJdLCJzb3VyY2VSb290IjoiIn0=